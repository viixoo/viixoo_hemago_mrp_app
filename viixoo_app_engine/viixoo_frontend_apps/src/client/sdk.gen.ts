// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  WorkOrdersReadItemsResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  UsersReadUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UtilsHealthCheckResponse,
  ChangeStateWorkOrderData,
  ChangeStateResponse,
  BlockWorkOrderData,
  AddComponentWorkOrderData,
  ReasonsLossReadItemsResponse,
  ProductReadItemsResponse,
  ConsumeComponentWorkOrderData,
} from "./types.gen";

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ProductionOrders Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/production-orders/",
      query: {
        order_search: data.order_search,
        show_all_state: data.show_all_state,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class WorkOrdersService {
  /**
   * Read WorkOrders
   * Retrieve workorders.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.skip
   * @param data.limit
   * @returns WorkOrders Successful Response
   * @throws ApiError
   */
  public static readWorkOrders(
    data: ItemsReadItemsData
  ): CancelablePromise<WorkOrdersReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/work-orders/",
      query: {
        order_search: data.order_search,
        show_all_state: data.show_all_state,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read Reasons Loss
   * Retrieve reasons Loss.
   * @param data The data for the request.
   * @returns Reasons Loss Successful Response
   * @throws ApiError
   */
  public static readReasonsLoss(): CancelablePromise<ReasonsLossReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/reasons-loss/",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Read Products
   * Retrieve products.
   * @param data The data for the request.
   * @returns Products Successful Response
   * @throws ApiError
   */
  public static readProducts(): CancelablePromise<ProductReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/products/",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Start workorder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static startWorkorder(
    data: ChangeStateWorkOrderData
  ): CancelablePromise<ChangeStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/workorder/start",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Block workorder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static blockWorkorder(
    data: BlockWorkOrderData
  ): CancelablePromise<ChangeStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/workorder/block",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Unblock workorder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static unblockWorkorder(
    data: ChangeStateWorkOrderData
  ): CancelablePromise<ChangeStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/workorder/unblock",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Pause workorder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static pauseWorkorder(
    data: ChangeStateWorkOrderData
  ): CancelablePromise<ChangeStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/workorder/pause",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Finish workorder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static finishWorkorder(
    data: ChangeStateWorkOrderData
  ): CancelablePromise<ChangeStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/workorder/finish",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Add components
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static addComponentWorkorder(
    data: AddComponentWorkOrderData
  ): CancelablePromise<ChangeStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/component/add",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Consume components
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static consumeComponentWorkorder(
    data: ConsumeComponentWorkOrderData
  ): CancelablePromise<ChangeStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/component/consume",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/login/test-token",
    });
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    });
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UsersService {
  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/me",
    });
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    });
  }
}

export class UtilsService {
  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "v1/healthcheck/",
    });
  }
}
